--- javet-ref/cpp/CMakeLists.txt	2022-12-01 13:20:54.888196745 +0000
+++ javet/cpp/CMakeLists.txt	2022-12-01 21:19:11.754556739 +0000
@@ -113,13 +113,20 @@ if(DEFINED NODE_DIR)
         ${NODE_DIR}/deps/v8
         ${NODE_DIR}/deps/v8/include
         ${NODE_DIR}/src)
-    list(APPEND importLibraries
-        ada base64 brotli cares histogram llhttp nghttp2 nghttp3 ngtcp2 openssl simdutf torque_base uvwasi
-        v8_base_without_compiler v8_compiler v8_init v8_initializers
-        v8_libbase v8_libplatform v8_snapshot v8_turboshaft v8_zlib zlib zlib_adler32_simd zlib_inflate_chunk_simd)
-    if(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "(arm64|aarch64)")
-        list(APPEND importLibraries base64_neon64)
+    if(CMAKE_ANDROID_ARCH STREQUAL "arm" OR CMAKE_ANDROID_ARCH STREQUAL "arm64")
+        list(APPEND importLibraries
+            ada base64 brotli cares histogram llhttp nghttp2 nghttp3 ngtcp2 openssl simdutf torque_base uvwasi
+            v8_base_without_compiler v8_compiler v8_init v8_initializers
+            v8_libbase v8_libplatform v8_snapshot v8_turboshaft v8_zlib zlib)
     else()
+       	list(APPEND importLibraries
+            ada base64 brotli cares histogram llhttp nghttp2 nghttp3 ngtcp2 openssl simdutf torque_base uvwasi
+            v8_base_without_compiler v8_compiler v8_init v8_initializers
+            v8_libbase v8_libplatform v8_snapshot v8_turboshaft v8_zlib zlib zlib_adler32_simd zlib_inflate_chunk_simd)
+    endif()        
+    if(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "(arm64|aarch64)" OR CMAKE_ANDROID_ARCH MATCHES "(arm64|aarch64)")
+        list(APPEND importLibraries base64_neon64)
+    elseif(NOT CMAKE_ANDROID_ARCH MATCHES "(arm|arm64)")
         list(APPEND importLibraries base64_avx base64_avx2 base64_avx512 base64_sse41 base64_sse42 base64_ssse3)
     endif()
     if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
@@ -127,7 +134,7 @@ if(DEFINED NODE_DIR)
     elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "(arm64|aarch64)")
         list(APPEND importLibraries node uv)
     elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux" OR CMAKE_SYSTEM_NAME STREQUAL "Android")
-        list(APPEND importLibraries node node_text_start uv)
+        list(APPEND importLibraries node uv)
     elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
         list(APPEND importLibraries node uv)
     endif()
@@ -135,8 +142,10 @@ if(DEFINED NODE_DIR)
         list(APPEND importLibraries zlib_arm_crc32)
     elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "(arm64|aarch64)")
         list(APPEND importLibraries zlib_arm_crc32)
-    # else()
-    #     list(APPEND importLibraries zlib_crc32_simd)
+    # elseif(NOT CMAKE_ANDROID_ARCH STREQUAL "arm")
+    #     if(NOT CMAKE_ANDROID_ARCH STREQUAL "arm64")
+    #         list(APPEND importLibraries zlib_crc32_simd)
+    #     endif()
     endif()
     add_definitions(-DENABLE_NODE)
     set(JAVET_LIB_TYPE "node")
@@ -231,8 +240,13 @@ elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux" OR CMAKE_SYSTEM_NAME STREQUAL "Android
         set(JAVET_LIB_SYSTEM "android")
         add_definitions(-D__ANDROID__)
         list(APPEND includeDirs $ENV{JAVA_HOME}/include/linux)
-        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wno-unknown-pragmas -Wno-unused-function -Wno-unused-variable -funroll-loops -ftree-vectorize -ffast-math -fpermissive -fPIC ")
-        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-unknown-pragmas -Wno-unused-function -Wno-unused-variable -funroll-loops -ftree-vectorize -ffast-math -fpermissive -fPIC ")
+        if(CMAKE_ANDROID_ARCH STREQUAL "arm")
+            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32 -Wall -Wno-unknown-pragmas -Wno-unused-function -Wno-unused-variable -funroll-loops -ftree-vectorize -ffast-math -fpermissive -fPIC ")
+            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32 -Wall -Wno-unknown-pragmas -Wno-unused-function -Wno-unused-variable -funroll-loops -ftree-vectorize -ffast-math -fpermissive -fPIC ")
+        else()
+            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wno-unknown-pragmas -Wno-unused-function -Wno-unused-variable -funroll-loops -ftree-vectorize -ffast-math -fpermissive -fPIC ")
+            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-unknown-pragmas -Wno-unused-function -Wno-unused-variable -funroll-loops -ftree-vectorize -ffast-math -fpermissive -fPIC ")
+        endif()
         if(DEFINED V8_DIR)
             foreach(importLibrary ${importLibraries})
                 set_target_properties(${importLibrary} PROPERTIES IMPORTED_LOCATION ${V8_RELEASE_DIR}/obj/lib${importLibrary}.a)
@@ -242,6 +256,20 @@ elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux" OR CMAKE_SYSTEM_NAME STREQUAL "Android
             target_link_libraries(JavetStatic PUBLIC -Wl,--whole-archive ${importLibraries} -Wl,--no-whole-archive
                 -llog -static-libgcc -static-libstdc++ "${libgcc}")
         endif()
+        if(DEFINED NODE_DIR)
+            list(APPEND includeDirs
+                ${NODE_DIR}/out/Release/obj/gen/generate-bytecode-output-root
+                ${NODE_DIR}/out/Release/obj/gen/inspector-generated-output-root
+                ${NODE_DIR}/out/Release/obj/gen)
+            foreach(importLibrary ${importLibraries})
+                set_target_properties(${importLibrary} PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/lib${importLibrary}.a)
+            endforeach(importLibrary)
+            list(REMOVE_ITEM importLibraries v8_init)
+            target_link_libraries(Javet PUBLIC -Wl,--whole-archive ${importLibraries} -Wl,--no-whole-archive
+                v8_init -llog debug -static-libgcc -static-libstdc++ optimized "${libgcc}")
+            target_link_libraries(JavetStatic PUBLIC -Wl,--whole-archive ${importLibraries} -Wl,--no-whole-archive
+                v8_init -llog debug -static-libgcc -static-libstdc++ optimized "${libgcc}")
+        endif()
     elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "(arm64|x86_64)")
         set(JAVET_LIB_SYSTEM "macos")
         set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-ambiguous-reversed-operator ")
--- javet-ref/cpp/jni/javet_native.h	2022-12-01 13:20:54.888196745 +0000
+++ javet/cpp/jni/javet_native.h	2022-12-01 18:46:45.951502958 +0000
@@ -21,6 +21,7 @@
 #include "javet_node.h"
 #include "javet_v8.h"
 
+
 #ifdef __ANDROID__
 #define SUPPORTED_JNI_VERSION JNI_VERSION_1_6
 #else
@@ -30,7 +31,7 @@
 #define FETCH_JNI_ENV(javaVMPointer) \
     JNIEnv* jniEnv; \
     javaVMPointer->GetEnv((void**)&jniEnv, SUPPORTED_JNI_VERSION); \
-    javaVMPointer->AttachCurrentThread((void**)&jniEnv, nullptr);
+    javaVMPointer->AttachCurrentThread(&jniEnv, nullptr);
 
 #define DELETE_LOCAL_REF(jniEnv, localRef) if (localRef != nullptr) { jniEnv->DeleteLocalRef(localRef); }
 
